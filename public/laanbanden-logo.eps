%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 14.2.1 (Build 23C71) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 628 88
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 628 88
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: RWDTWH+NotoSans-Bold
%!FontType1-1.0: RWDTWH+NotoSans-Bold 1.0000.1.0400
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
14 dict begin
/FontName /RWDTWH+NotoSans-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /gid37 put
dup 34 /gid68 put
dup 35 /gid81 put
dup 36 /gid71 put
dup 37 /gid72 put
dup 38 /gid86 put
dup 39 /gid83 put
dup 40 /gid70 put
dup 41 /gid76 put
dup 42 /gid79 put
dup 43 /gid87 put
dup 44 /gid2413 put
dup 45 /gid69 put
dup 46 /gid82 put
dup 47 /gid88 put
dup 48 /gid90 put
dup 49 /gid74 put
dup 50 /gid85 put
dup 51 /gid89 put
dup 52 /gid93 put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1359 1 index div -806 2 index div 2952 3 index div 2189 5 -1 roll div]cvx def
/sfnts [<

1B2111592D2C2045B00325465058B0022546206861B00325B003253F2321381B2111592D2C00B00743B006430B2D2C20B003254550588A20458A8B44211B214544592D2C21B08051580C6423648BB82000621BB200402F2B59B002602D2C21B0C051580C6423648BB81555621BB200802F2B59B002602D2C0C6423648BB84000626023212D2C4B53588AB004254964234569B0408B61B08062B020616AB00E23442310B00EF61B21238A121120392F592D2C4B535820B0032549646920B00526B0062549642361B08062B020616AB00E2344B0042610B00EF68A10B00E2344B00EF6B00E2344B00EED1B8AB00426111220392320392F2F592D2C4523456023456023456023766818B08062202D2CB0482B2D2C2045B0005458B040442045B04061441B2121592D2C45B1302F4523456160B0016069442D2C4B5158B02F2370B01423421B2121592D2C4B515820B0032545695358441B2121591B2121592D2C45B01443B0006063B0016069442D2CB02F45442D2C452320458A60442D2C45234560442D2C4B235158B90033FFE0B134201BB3330034005944442D2CB0164358B00326458A586466B01F601B64B020606620581B21B04059B001615923586559B02923442310B029E01B2121212121592D2CB0024354584B53234B515A58381B2121591B21212121592D2CB0164358B004254564B020606620581B21B04059B0016123581B6559B0292344B00525B00825082058021B0359B0042510B005252046B0042523423CB00425B0072508B0072510B006252046B00425B0016023423C2058011B0059B0042510B00525B029E0B02920456544B0072510B00625B029E0B00525B00825082058021B0359B00525B003254348B00425B0072508B00625B00325B0016043481B2159212121212121212D2C02B00425202046B004252342B0052508B003254548212121212D2C02B0032520B0042508B0022543482121212D2C452320451820B00050205823652359236820B040505821B04059235865598A60442D2C4B53234B515A5820458A60441B2121592D2C4B545820458A60441B2121592D2C4B53234B515A58381B2121592D2CB000214B5458381B2121592D2CB002435458B0462B1B21212121592D2CB002435458B0472B1B212121592D2C20B0025423B000545B58B080B0024350B001B00243545B58212121211BB0482B591BB080B0024350B001B00243545B58B0482B1B2121212159592D2C20B0025423B000545B58B080B0024350B001B00243545B582121211BB0492B591BB080B0024350B001B00243545B58B0492B1B21212159592D2C208A08234B538A4B515A5823381B2121592D2C00B0022511B00225496A20B0005358B04060381B2121592D2C00B0022511B00225496A20B0005158B04061381B2121592D2C208A2349648A2353




00>] def
/CharStrings 21 dict dup begin
/.notdef 0 def
/gid37 1 def
/gid68 2 def
/gid69 3 def
/gid70 4 def
/gid71 5 def
/gid72 6 def
/gid74 7 def
/gid76 8 def
/gid79 9 def
/gid81 10 def
/gid82 11 def
/gid83 12 def
/gid85 13 def
/gid86 14 def
/gid87 15 def
/gid88 16 def
/gid89 17 def
/gid90 18 def
/gid93 19 def
/gid2413 20 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] readonly def
/FontBBox {-1359 -806 2952 2189} readonly def
/UniqueID 4195312 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB281E3232AAAE39DD432AA1E5356738508FDA4147F2F61700BB68D9A12BCBB7EF22690EF4502E3B551E2D6BB8E6E1548B82E46A95B5DCBA54C94B85D7363519FC7C36F013581BF3956B7A2290DED01B623C642B426A1EBDA48A1705E567706CB40BD9C6913BE76EFA9816E28D9844B667847D66D2B9F7E59C5A01357B9D5AB326771CB1D052CBEBF01F656C91AB9011EA0A69B250390130CF7418BEA23C9C145D307043468AFDF751D0AD96EE1C6F9B2B2529EE4D5695275FE7219F4B2A5E79D1E8E769BF57B465E85EA382832304A569B647F6FDB74E40A10EAFD2070415190631DACD2320D373C7908C23E4E0CE278A17298F37926AA6A4A18604EE73E27BB3003CE084398AEC8A83BCDF027B8433BCD01B675B6F780C4949D408E0AA807A574CB76070164F6DF5218F41B07C546334BC82AED19FCF7ACC71C87EC1DC0E68001FFE15A394F9F08285BA1E2001BF00610660B7A9FD3CDC6D0EE7A15E3F3E191855DEADD6C9638FB8CA88767C33D13520195DD7268537ECE47A3D24EA28E9950C9A37CE195307183929110AFE2EA026D23D97680F643763540879BD4BFFC6A0B6F5B04117799B38BE247D51A1A6C457D700CB9E04F43EA18C18A98E162DE846D3FCA3D68E55A893A370D1C0687CC862A2A404403BD2CC25FAD0537033EA275FC060BBE79547742850F4F633ACB924FCA2C7EFC535E8508C993CDE60339517D29DE25A438A354E8C2FC39C265A95D72931AA752AD0ED25B3FF2F0AC83CE5D3639EEAFE76ADE
FC4308E218A008C0E0E0AAD48A4CC84EC3094D01E44A4A6E4A838AAA0A0ACA394C0FDB84213C56715A6E17F5E34E1764F8C69FFA7644186E74A8A289CB6214138F8007C48D95FCB77B6ECF3682DC16D0FA62A2F160F3576B8421B4FA7A6669A1F85EC2C5398041B46841CEEC76A93624C89104DEF6F196780223F46DF2D7801B2B56D4294A7B3CCB351108C32FD7A3A03E4A1A268E3C7B8073666FEDB70FC3B5E66711A3F2051D1F28AB9E2C0D5B15B2D1E962BF38C83AAEB9A16E0AA17009285FD7C7A9C9F5F8DB459997891F357B9106C50F6C90625FE9FFE069E02884F4E204781E7B57A3525349E08B536742E4625CCD1DC1EA11ABCBB4043EAE4D93188A62DF28B2767B3DCB84977B2354597AB5B9CF5838A65C8717A4E3D840E8AF39078B9B7323BE41E83EE2147F32BFEF3A03A05A5A708487C88120C173413149FBD391D5E49432532C74DE86936454646D4191939F175E8EA682F0E2A7C9177B7AD364F7696641325B4E70CB7ACE55AF256CEE443411903608386A634FDFC5566D3DE7421708941FF475423B4CF89A8D36C5BBCE241AA96C01FB046ADFDF6001BF53B3776B2FFF519EC56C57006E505D6DADC42F2C7CF7E2B6AF40DABB12FB0F33E41F06DCE2516FF78011B125D88B0108B7F4C92C41B69BD37FE9764521827A59E80B6B069A722FD30F5D227440666352B3AB766E97A468360C99EE0ED0E24B6AD182B7D071E3038E7FAC8BBF4778E61AC31438928B65A04FF1BF01357EBE8110293861604A841C0FA954E42E946171CC18C82C573596F2B15C938D0D1998B060371AEADAB83A4DE46C9F3C27393ADFDDE53F825CBBB1C111732C391397808E0F7FA2733700236599E5972A7A0E4F25F2F88B216F900DA0A32F7FFBB9ACF97070E9569A0FC771DCCEAE1517206B739F3E947A4D60FB2EF651BF4021A20903135C6937F251B4847F24BF89D59D79D45E67E6839DE9895932781080A566B96A078A5D9814AA4687955CE4786D6E212D74FA4556430B7D5A536B03D973F625E436A4E577E940108D013CA856A2FC9836AEBE0D58A676A6103757B39E26CEC947978D013899F5D1F2695000F388CBE05E8598A9D0D18A0B52BEE3B1270C73A7D82E3495650A5BDF1C3F9DE2198905B2911B2C629A19281612E08AA6F59D81879D19FC6F2D2FC7300C90F242A9FDF097B3CBF35E70ED2652EAEEA1378FCE336F905CB02E8117B0AD40D7075911DF44F4A2813C33AED2300E78DEBD242A8F241DD3786B53A316C43AE8C3B88670F3B547B392BFAC59A104D6C2D2F1D23EF60A913EA8B9DEA86E284418A6806CA1665ABFAC2427DB9EC60AEE8C0F686C7E4CB73316B58D01F2CA1D46104CF4ABA27C8ED86538AC56CA2D8B553CE015323FB13B144449B6E8747A7D776ADD8F7F73204DD273A0AC432D4DA4C18E74DB752505C90DEEB14C50

4DC8239C5275B2903A25D233BEDF1A208363C7DEDBB894139A64F3CC4064D97669709437DFBB549BE5AB8DFD1E1DB637DA5BF41FCCE3FE0D5A3FBEF22CE2B30DF8A6647776534A45DBCD8E347EECC22DF5AEDBA0578551B89DDD28D894AFFAC45431425766302685FC23AFB7BA49BF9049169297568D64B5DADF1363CDEDD28113BCDA5E9EB50C2944B35E9EF74BC40B6D8A53A3635E7220210092FB4C539E268739329D14846FAC1E0F674FC7C5A24FA775DE8894A50605BECD96E79AD7CD2BC23A2C2935FADF053661177007D14038F507E7C04242AD53A2D17B72DB71169593BB974327FE7E7F50D4C56D66F307D4A8C206AEE33CE3AAD64DA5F62CFCBCF425D50CF9CBF3C01C8954E3D0AA530B8295014EC881EBC6AC8CD95511008A070652AE1F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%APLT1End
%RBIEndFontSubset
/RWDTWH+NotoSans-Bold cguidfix
/F1.1/RWDTWH+NotoSans-Bold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.18039216 0.25882354 0.28627452 sc
q
141.5361 47.76886 m
140.07108 49.044353 138.62007 48.298073 137.21005 47.704281 c
136.79147 47.52668 136.38692 47.05846 136.19489 46.611771 c
136.09888 46.389324 136.43224 45.6861 136.67928 45.612549 c
137.30499 45.42239 138.12813 45.190971 138.62546 45.474415 c
139.68594 46.077179 140.58998 46.995674 141.5361 47.76886 c
141.5361 47.76886 l
h
119.63724 50.226559 m
119.57682 49.959259 119.51533 49.691963 119.45276 49.424667 c
120.14104 49.123283 120.80451 48.705296 121.51977 48.53846 c
123.93847 47.966194 126.39601 47.562557 128.80069 46.936474 c
130.48473 46.498753 132.10942 45.799118 133.76971 45.214294 c
133.938 45.741711 134.06422 46.139965 134.2444 46.705055 c
129.45122 48.513348 124.66344 49.987965 119.63724 50.226559 c
119.63724 50.226559 l
h
143.4866 39.12746 m
142.90729 39.857594 142.44879 40.964455 141.68822 41.307098 c
138.30614 42.833736 134.88737 44.313736 131.38876 45.488766 c
126.23311 47.216328 120.91132 47.948254 115.4989 47.596645 c
114.62721 47.541031 113.7728 47.153542 112.90974 46.918533 c
112.93563 46.751698 112.96152 46.583069 112.98742 46.416233 c
115.0965 46.224281 117.21529 46.098705 119.31467 45.826027 c
122.36664 45.427773 125.44018 45.095894 128.4436 44.421371 c
132.57547 43.492115 136.32327 41.448818 139.97507 39.220745 c
141.04092 38.571342 142.11435 37.880676 143.4866 39.12746 c
143.4866 39.12746 l
h
144.79628 12.778099 m
148.36069 15.42057 151.76219 18.168882 155.37839 20.542263 c
157.79062 22.128105 160.49953 23.199085 163.093 24.456636 c
163.90858 24.853096 164.47711 25.244175 163.88808 26.306187 c
163.64211 26.747496 163.48352 27.24621 163.25374 27.791567 c
161.61179 27.176247 159.96982 26.837193 158.5965 25.994041 c
155.06984 23.832346 151.67697 21.421293 148.20103 19.164518 c
146.90213 18.321367 145.48349 17.686314 144.19215 16.832399 c
143.7164 16.516666 143.27516 15.89417 143.11549 15.318316 c
142.68828 13.78091 143.41649 12.934172 144.79628 12.778099 c
144.79628 12.778099 l
h
49.814144 53.624275 m
49.740788 53.507671 49.669582 53.394653 49.596226 53.279839 c
50.794788 52.059963 51.965302 50.804203 53.197311 49.625587 c
55.340916 47.575115 57.638794 45.693275 59.650784 43.506466 c
61.400623 41.601303 63.561489 40.487267 65.695389 39.380405 c
69.058052 37.640285 72.579308 36.248192 76.015335 34.664143 c
78.186989 33.661331 80.328438 32.576 82.492538 31.522959 c
82.641418 33.098038 82.777351 34.490131 82.904648 35.882229 c
83.039497 37.37299 82.613373 38.368626 81.089005 38.750736 c
80.093254 38.998299 79.168709 39.583122 78.221512 40.033401 c
74.720757 41.703556 71.221077 43.371918 67.727875 45.056427 c
63.955257 46.875481 60.193428 48.725029 56.417576 50.5387 c
54.225422 51.589951 52.016006 52.594555 49.814144 53.624275 c
49.814144 53.624275 l
h
139.51009 29.224924 m
139.37416 30.410717 139.24579 31.526546 139.09691 32.82177 c
139.05376 32.784096 139.153 32.897114 139.27383 32.96349 c
139.71399 33.202084 140.16061 33.424534 140.61804 33.661331 c
140.70326 33.02269 140.79497 32.436073 140.85646 31.845867 c
140.97728 30.695953 142.5545 29.942499 143.43806 30.656487 c
144.41762 31.445818 145.30009 32.385841 146.32388 33.098038 c
148.66277 34.723343 151.00272 36.366592 153.45917 37.769451 c
154.8325 38.553402 156.43779 38.874516 157.92116 39.398346 c
157.3127 40.855022 156.25761 41.466759 155.00296 41.029037 c
153.00499 40.329399 151.034 39.486248 149.14391 38.501377 c
147.47606 37.63311 145.93552 36.484989 144.33995 35.460651 c
144.09937 35.83379 l
144.91603 36.415028 145.75751 36.958591 146.53966 37.588264 c
147.3725 38.259197 148.14925 39.014442 148.92276 39.706905 c
148.4319 40.957279 147.98849 42.082077 147.60445 43.059772 c
147.27864 43.328865 146.71335 43.74506 146.73708 43.78632 c
147.08337 44.417786 147.50735 44.99902 147.83531 45.478004 c
145.88049 45.673542 141.90829 44.218658 140.29655 42.50724 c
144.48883 41.717907 144.05621 38.521111 143.6042 34.996021 c
142.2341 35.189766 140.76044 35.101864 139.51657 35.634663 c
136.64368 36.86351 133.95743 38.610809 131.05542 39.735607 c
128.40477 40.76712 125.59122 41.350151 122.81435 41.947533 c
121.04077 42.331436 119.19923 42.333229 117.39977 42.595142 c
115.11916 42.928818 112.90003 42.892937 110.78123 41.676647 c
111.49757 41.491871 112.22038 41.447025 112.94102 41.382442 c
114.35535 41.258659 115.64022 41.059532 116.22926 39.27277 c
116.73953 37.724602 118.02764 36.818665 119.44089 36.36121 c
123.30844 35.103661 127.27525 34.484749 131.1223 33.164413 c
136.32759 30.473505 141.88348 28.952246 140.51447 27.970961 c
139.12172 28.457117 135.00172 30.773092 133.62083 31.296923 c
131.07591 32.260265 128.73488 33.202084 126.12846 33.89275 c
121.49064 35.121597 116.64244 36.328918 111.95284 37.371197 c
111.67234 35.403248 112.28511 33.887367 113.39197 33.690037 c
116.38353 33.157234 119.41824 32.843296 122.36987 32.131104 c
126.13818 31.219782 130.01112 30.426863 133.52806 28.808729 c
137.39453 27.027349 140.94707 24.435108 144.54601 22.040201 c
145.38208 21.485874 145.96033 21.758553 146.45227 22.151426 c
146.74355 22.382843 146.68314 23.190115 146.69069 23.739061 c
146.69716 24.130138 146.55045 24.521217 146.42961 25.123981 c
147.68752 23.335424 147.68211 21.984589 146.54613 20.118895 c
146.20198 20.011257 145.82764 19.96641 145.52017 19.787016 c
144.55679 19.221924 143.71315 19.178869 142.98711 20.215767 c
142.86305 20.389778 142.61493 20.466917 142.41858 20.579935 c
140.40335 21.731644 138.39999 22.910261 136.36751 24.029678 c
132.94443 25.91152 129.37462 27.386137 125.6171 28.310015 c
122.42274 29.09576 119.23052 29.901237 116.01781 30.588316 c
115.39101 30.722862 114.65634 30.401747 113.99611 30.199032 c
113.64117 30.091396 113.33803 29.788219 112.77921 29.418669 c
114.24639 29.015034 115.56255 28.747736 116.80858 28.27593 c
117.51197 28.00684 118.30598 27.54221 118.69219 26.907156 c
119.16579 26.132174 119.28877 25.097073 119.50022 24.160637 c
119.81955 22.745218 120.38809 21.475111 121.65462 20.856203 c
123.43143 19.987936 125.28052 19.291889 127.08753 18.498968 c
128.64102 17.819065 130.17941 17.103283 131.72427 16.403648 c
128.72841 17.399284 125.74333 18.437973 122.73235 19.379791 c
120.24353 20.156567 117.71694 20.797003 115.22057 21.55225 c
114.6078 21.737026 114.32191 21.920008 114.45892 20.954868 c
114.59593 19.989731 114.4902 18.983332 114.4902 18.116859 c
117.29081 17.227066 119.91341 16.373152 122.54464 15.55691 c
127.97216 13.874195 133.47736 12.424693 138.28348 9.0251808 c
140.60941 7.3819332 142.99898 5.8337646 145.24399 4.0721173 c
146.07253 3.420918 146.63135 3.8568449 147.20959 4.1474628 c
147.51814 4.3017416 147.71988 4.9493532 147.76735 5.3996315 c
147.87846 6.4508796 147.41565 7.2635336 146.54289 7.7496905 c
145.38531 8.3955088 144.15115 8.8996048 143.05077 9.6387072 c
142.06041 10.304258 141.13586 10.982368 140.22102 11.778875 c
142.18771 10.61461 144.25041 9.7176409 146.17717 8.4834108 c
146.96794 7.9757266 147.94858 7.3568182 148.24419 6.5387826 c
148.5538 5.6812801 148.14384 4.5277777 148.0392 3.4119482 c
152.26384 6.6159215 156.7377 9.5938587 160.53189 13.576402 c
159.61705 13.441856 158.81117 13.057954 157.96646 12.867796 c
157.60182 12.785275 156.94591 12.970051 156.78409 13.262463 c
156.01166 14.65097 156.63953 17.802919 157.9751 19.173489 c
152.56268 17.596617 148.36717 14.191722 144.38202 10.679192 c
143.31184 11.430852 142.26755 12.162778 141.45844 12.731457 c
141.65802 14.250922 141.8317 15.576642 142 16.843163 c
142.91159 17.471041 143.94833 18.168882 144.96674 18.893635 c
145.50723 19.279331 146.01967 19.708082 146.54613 20.118895 c
146.82985 20.181681 147.17076 20.163742 147.38652 20.330578 c
148.85048 21.446407 150.18173 22.822359 151.75681 23.699594 c
154.5067 25.231617 154.84653 28.907396 153.5347 31.246693 c
152.93379 32.317673 153.15063 32.705162 153.91228 33.250519 c
154.30713 33.535755 154.6696 33.873016 155.28992 34.387878 c
150.1375 33.198498 145.82117 30.961456 142.33443 27.192392 c
139.51009 29.224924 l
h
74.435951 55.52047 m
58.114552 62.750038 41.794231 69.979607 25.473913 77.207382 c
25.432919 77.112305 25.391924 77.01902 25.352007 76.923943 c
27.988632 74.389107 30.619862 71.848892 33.264038 69.321236 c
36.568451 66.160316 40.84919 65.039101 44.735085 63.108826 c
49.677135 60.65472 54.689312 58.356686 59.699329 56.060444 c
62.238861 54.896179 64.852829 53.920277 67.406387 52.7883 c
70.177864 51.561245 72.914818 50.239113 75.67659 48.986946 c
78.495529 47.709663 81.317711 46.437759 84.161469 45.232235 c
85.064438 44.850124 85.696625 44.412403 85.393478 43.278633 c
85.728989 44.645615 85.937202 46.071796 86.448555 47.356255 c
86.725815 48.05051 87.446465 48.82011 88.101303 49.00309 c
89.237297 49.318825 89.752968 50.027431 89.819855 51.100204 c
89.967651 53.495113 91.293518 54.496128 93.304428 55.009197 c
97.405006 56.055061 101.46351 57.280323 105.56841 58.302868 c
107.42289 58.765701 109.3475 58.894867 111.23326 59.221363 c
113.6142 59.633968 115.98544 60.112949 118.36747 60.516586 c
118.93169 60.611664 119.52288 60.509411 120.10004 60.530937 c
121.04401 60.572197 121.99229 60.735447 122.93085 60.679832 c
125.70881 60.520172 128.50401 60.437653 131.2496 60.0089 c
132.76965 59.772102 135.15276 59.610645 136.67281 59.273388 c
138.85632 58.790817 139.80244 58.541458 142.22763 57.832855 c
143.22446 57.676781 144.30112 56.935886 145.28499 56.686527 c
146.63243 56.340298 147.99281 56.044296 149.32083 55.626312 c
150.32521 55.308784 151.29184 54.86927 150.64346 53.335453 c
150.57982 53.182968 151.14619 52.479744 151.47955 52.422337 c
152.64467 52.216034 153.83676 52.19989 155.0159 52.068932 c
155.35789 52.031258 155.72253 51.91824 156.01381 51.726288 c
158.3365 50.197853 158.31061 50.197853 157.38821 46.163288 c
157.1498 45.11742 156.55214 43.947773 157.69461 43.047218 c
157.98265 42.819386 158.38181 42.573616 158.70653 42.6077 c
159.78104 42.720718 160.84151 43.066952 161.91277 43.097446 c
162.45758 43.115387 163.27855 42.810417 163.51158 42.369106 c
164.03157 41.384235 164.93237 40.350929 164.04451 39.034176 c
163.54395 38.291485 163.07896 37.509331 162.68736 36.694881 c
161.6161 34.470398 162.6906 30.895081 164.80077 29.924559 c
165.43187 29.635735 166.25716 29.764898 166.98643 29.813335 c
167.75887 29.863565 168.09654 29.563978 168.32849 28.754911 c
168.88191 26.824635 168.66615 25.376926 166.91847 24.16243 c
166.27766 23.71574 165.88713 22.400784 165.86879 21.471523 c
165.817 19.024591 166.42006 16.84675 168.6586 15.48874 c
170.42355 14.415964 171.10643 12.26862 170.48396 10.245058 c
170.36745 9.8647432 169.89278 9.464695 169.51195 9.3498831 c
166.42114 8.4170361 166.57649 6.5692792 167.16121 3.9142511 c
167.5636 2.088022 168.5777 0.4178656 169.31883 -1.3186665 c
155.95987 -1.3186665 l
155.85306 -0.35352781 155.81099 0.47706559 155.62651 1.2699862 c
155.592 1.4117073 154.96519 1.393768 154.26289 1.50858 c
156.10982 2.696167 157.75717 3.8012328 159.44876 4.8273654 c
160.58583 5.5144439 161.7995 6.0562129 162.95059 6.7199702 c
164.69612 7.7299571 164.9108 8.3381023 164.5742 11.084621 c
163.54501 10.560792 162.50397 10.124865 161.54813 9.5292768 c
158.72163 7.7658358 155.89838 5.9880433 153.13014 4.1223478 c
150.57335 2.4001672 148.09099 0.55420488 145.56656 -1.2235878 c
145.3918 -1.3455755 145.14151 -1.390424 144.92575 -1.3922179 c
143.64304 -1.4083633 142.36032 -1.4011877 140.97189 -1.1087757 c
141.85652 -0.61364877 142.75085 -0.13466731 143.62361 0.3855747 c
145.06491 1.2430772 145.21162 1.7579374 143.9548 2.8020093 c
141.84897 4.5528927 139.73016 6.3755341 137.38051 7.6815209 c
134.03941 9.5364532 130.51385 11.037979 127.00339 12.519772 c
125.46068 13.170972 123.75615 13.375481 122.13469 13.827553 c
120.09142 14.394437 118.06324 15.029491 116.01781 15.582025 c
115.67474 15.673515 115.26803 15.494122 114.8926 15.438509 c
114.87427 15.262703 114.857 15.088692 114.83866 14.91468 c
116.26378 14.340619 117.67056 13.703771 119.12156 13.21582 c
120.17341 12.862414 120.46684 12.299118 120.1227 11.176112 c
119.95657 10.628962 120.02776 9.9885254 120.03748 9.3929377 c
120.05689 8.2358475 118.83675 7.4303694 117.47961 7.7173996 c
116.79995 7.8609147 116.11706 7.9846964 115.43525 8.1174479 c
115.40073 7.9990482 115.36836 7.8788543 115.33492 7.7568665 c
121.18533 4.7699594 127.03575 1.7812586 132.8484 -1.185915 c
131.11368 -1.6756601 130.18913 -1.4621814 127.0228 -0.1023764 c
123.88561 1.246665 120.72684 2.5400944 117.55512 3.7904692 c
115.07061 4.7699594 115.05443 4.725111 115.07384 1.8709555 c
115.07708 1.5283133 115.07492 1.1856711 115.07492 0.7963866 c
116.97795 0.1774779 118.82381 -0.42528531 120.66966 -1.0280485 c
120.65024 -1.1249211 120.62866 -1.2199999 120.60925 -1.3150786 c
100.83564 -1.3150786 l
102.96198 1.6843859 102.88754 5.2543225 102.80556 8.7058592 c
102.74299 11.287336 102.48083 13.33422 101.9274 16.233223 c
101.64152 17.896204 101.10426 19.779839 100.61448 21.378239 c
100.14412 22.917437 99.843132 24.399231 99.237915 25.895374 c
98.834435 26.89101 98.501083 27.958403 97.576538 28.880487 c
95.711266 30.73542 92.968918 30.344341 91.555672 28.200584 c
89.770233 25.491739 88.86618 22.476128 88.427109 19.234482 c
88.214577 17.662992 88.244781 18.556374 88.006371 16.988472 c
87.887695 16.206314 87.580238 12.955699 87.568367 12.146633 c
87.527374 9.6189737 87.136841 6.3360672 87.588867 3.3850391 c
87.877991 1.5014042 88.182213 0.74077451 88.601875 -1.2774059 c
80.821457 -1.2774059 l
80.794487 -1.1751513 80.715736 -1.0011394 80.703865 -0.81815767 c
80.417976 3.3312211 80.20977 7.4859815 79.839737 11.62639 c
79.467545 15.775769 78.949715 19.91259 78.452377 24.047619 c
78.401672 24.48175 78.134125 24.969702 77.826668 25.265701 c
73.746582 29.19622 69.622276 33.074715 65.561615 37.028553 c
64.850677 37.719219 64.384628 38.702297 63.806381 39.550831 c
63.627296 39.398346 63.447136 39.244068 63.268051 39.091583 c
63.268051 9.5723314 l
62.857025 9.6853495 62.506409 9.6709986 62.337036 9.8485985 c
57.94302 14.516425 53.581367 19.218336 49.173328 23.871813 c
48.493675 24.589388 48.092358 25.299788 48.249863 26.320538 c
48.273598 26.465847 48.255257 26.616537 48.253101 26.765434 c
48.1614 33.679272 48.083725 40.591316 47.968292 47.505154 c
47.930534 49.666847 47.943481 51.850071 47.625229 53.970505 c
47.491455 54.858505 46.649979 55.719597 45.966011 56.403084 c
43.041344 59.332588 40.061653 62.199299 37.086281 65.069603 c
36.768032 65.374573 36.345135 65.557549 35.896347 65.846375 c
34.941597 57.61758 34.008423 49.575356 33.028858 41.120525 c
31.363167 43.027485 29.977968 44.683289 28.521566 46.263748 c
27.246407 47.646873 25.87631 48.927746 24.572023 50.280376 c
23.410139 51.485901 22.230993 52.678871 21.164045 53.975887 c
20.792933 54.427959 20.509205 55.199352 20.567461 55.782383 c
21.059401 60.765942 21.612833 65.744118 22.206181 70.715126 c
22.445679 72.731514 22.811398 74.73175 23.155539 76.733788 c
23.422007 78.285545 22.392817 79.089226 21.530844 79.916229 c
19.292301 82.063576 16.985794 84.130196 14.469996 86.44796 c
12.470952 80.027458 11.446077 73.479584 9.7361546 66.84201 c
8.8029795 67.704895 7.9517941 68.390182 7.2128057 69.193863 c
5.0195737 71.583389 2.8824406 74.035706 0.69460309 76.432404 c
0.17137761 77.004669 -0.065961763 77.44957 0.24797352 78.330391 c
1.1638877 80.899307 2.0193884 83.502312 2.7065938 86.150169 c
3.020529 87.357491 3.6721334 87.714478 4.62257 87.721657 c
8.3649807 87.753944 12.10739 87.739594 15.85088 87.728836 c
16.113031 87.727036 16.45286 87.721657 16.626549 87.558411 c
18.679535 85.628128 21.34313 85.192207 23.759676 84.155312 c
26.078051 83.161469 28.370533 82.097664 30.692142 81.114586 c
33.272671 80.022072 35.884483 79.015678 38.463928 77.919579 c
42.486832 76.204575 46.476292 74.398079 50.512138 72.718956 c
53.440044 71.50087 56.444546 70.498055 59.359505 69.251274 c
60.294838 68.851219 61.081295 68.011658 61.890404 67.31382 c
65.79895 63.941212 69.696716 60.552464 73.586922 57.15295 c
73.991478 56.799545 74.318359 56.343887 74.681915 55.936661 c
74.435951 55.52047 l
h
W
0.10703117 1 170.60268 86.741501 rc
-0.89296883 88.741501 m
171.7097 88.741501 l
171.7097 0 l
-0.89296883 0 l
h
f
Q
q
26 87.414505 m
26.020266 87.539963 26.039404 87.663704 26.059669 87.787453 c
26.347887 87.844162 26.634979 87.949005 26.922071 87.949005 c
30.439228 87.961029 33.964268 88.093369 37.466789 87.876816 c
38.568996 87.809792 39.699348 86.916092 40.661953 86.201134 c
42.75716 84.644043 44.756668 82.96492 46.786579 81.325333 c
47.536396 80.720367 48.262569 80.091339 49 79.470909 c
48.911057 79.314514 48.822117 79.158119 48.732048 79 c
26 87.414505 l
h
W
0 0 628 88 rc
25 89 m
50 89 l
50 78 l
25 78 l
h
f
Q
1 1 1 sc
q
142 10.026735 m
141.75307 9.7542896 139.02345 11.652449 138.92014 11.71339 c
136.68127 13.023641 135.5634 13.464573 132.11264 15.169152 c
130.1021 16.162146 128.58542 16.941843 127.20924 17.829084 c
125.42497 18.976225 135.58716 14.007672 137.40036 13.072036 c
138.08432 12.720724 141.36047 10.485592 142 10.026735 c
W
0 0 628 88 rc
124.42497 19.976225 m
143 19.976225 l
143 8.7542896 l
124.42497 8.7542896 l
h
f
Q
0.18039216 0.25882354 0.28627452 sc
q
235.864 39.284 m
235.17999 35 l
219.556 35 l
219.88 40.400002 l
219.88 56.779999 l
219.556 62 l
224.632 62 l
224.34399 56.779999 l
224.34399 40.400002 l
224.416 39.284 l
235.864 39.284 l
h
W
0 0 628 88 rc
218.556 63 m
236.864 63 l
236.864 34 l
218.556 34 l
h
f
Q
q
237.808 41.012001 m
237.808 42.403999 238.132 43.658001 238.78 44.773998 c
239.42799 45.889999 240.304 46.765999 241.408 47.402 c
242.51199 48.037998 243.724 48.355999 245.04401 48.355999 c
246.14799 48.355999 247.17999 48.259998 248.14 48.068001 c
249.10001 47.875999 249.88 47.612 250.48 47.276001 c
250.48 49.292 l
250.48 50.467999 250.10201 51.355999 249.34599 51.956001 c
248.59 52.556 247.48 52.855999 246.01601 52.855999 c
244.576 52.855999 243.29201 52.604 242.164 52.099998 c
241.036 51.596001 240.172 50.875999 239.57201 49.939999 c
239.17599 50.012001 l
239.752 54.728001 l
240.54401 55.472 241.558 56.054001 242.79401 56.473999 c
244.03 56.894001 245.32001 57.104 246.664 57.104 c
249.18401 57.104 251.17599 56.492001 252.64 55.268002 c
254.104 54.043999 254.836 52.352001 254.836 50.192001 c
254.836 40.363998 l
255.12399 35 l
250.588 35 l
250.48 37.088001 l
250.024 36.32 249.244 35.683998 248.14 35.18 c
247.036 34.675999 245.86 34.424 244.612 34.424 c
242.5 34.424 240.838 35.012001 239.62601 36.188 c
238.414 37.363998 237.808 38.972 237.808 41.012001 c
h
242.308 41.335999 m
242.308 40.279999 242.548 39.506001 243.028 39.014 c
243.508 38.521999 244.3 38.276001 245.40401 38.276001 c
246.31599 38.276001 247.252 38.462002 248.21201 38.834 c
249.172 39.206001 249.92799 39.692001 250.48 40.292 c
250.48 43.495998 l
249.90401 43.832001 249.166 44.102001 248.26601 44.306 c
247.366 44.509998 246.436 44.612 245.476 44.612 c
244.37199 44.612 243.56799 44.341999 243.064 43.801998 c
242.56 43.262001 242.308 42.439999 242.308 41.335999 c
h
W
0 0 628 88 rc
236.808 58.104 m
256.12399 58.104 l
256.12399 33.424 l
236.808 33.424 l
h
f
Q
q
258.832 41.012001 m
258.832 42.403999 259.15601 43.658001 259.80399 44.773998 c
260.452 45.889999 261.328 46.765999 262.43201 47.402 c
263.53601 48.037998 264.74799 48.355999 266.06799 48.355999 c
267.172 48.355999 268.20401 48.259998 269.164 48.068001 c
270.12399 47.875999 270.90399 47.612 271.504 47.276001 c
271.504 49.292 l
271.504 50.467999 271.12601 51.355999 270.37 51.956001 c
269.61401 52.556 268.504 52.855999 267.04001 52.855999 c
265.60001 52.855999 264.31601 52.604 263.18799 52.099998 c
262.06 51.596001 261.19601 50.875999 260.59601 49.939999 c
260.20001 50.012001 l
260.776 54.728001 l
261.56799 55.472 262.582 56.054001 263.81799 56.473999 c
265.05399 56.894001 266.34399 57.104 267.68799 57.104 c
270.20801 57.104 272.20001 56.492001 273.664 55.268002 c
275.12799 54.043999 275.85999 52.352001 275.85999 50.192001 c
275.85999 40.363998 l
276.14801 35 l
271.612 35 l
271.504 37.088001 l
271.048 36.32 270.26801 35.683998 269.164 35.18 c
268.06 34.675999 266.884 34.424 265.63599 34.424 c
263.52399 34.424 261.862 35.012001 260.64999 36.188 c
259.43799 37.363998 258.832 38.972 258.832 41.012001 c
h
263.332 41.335999 m
263.332 40.279999 263.57199 39.506001 264.052 39.014 c
264.53201 38.521999 265.32401 38.276001 266.42801 38.276001 c
267.34 38.276001 268.276 38.462002 269.23599 38.834 c
270.19601 39.206001 270.952 39.692001 271.504 40.292 c
271.504 43.495998 l
270.92801 43.832001 270.19 44.102001 269.29001 44.306 c
268.39001 44.509998 267.45999 44.612 266.5 44.612 c
265.396 44.612 264.59201 44.341999 264.08801 43.801998 c
263.58401 43.262001 263.332 42.439999 263.332 41.335999 c
h
W
0 0 628 88 rc
257.832 58.104 m
277.14801 58.104 l
277.14801 33.424 l
257.832 33.424 l
h
f
Q
q
292.672 40.400002 m
292.672 49.759998 l
292.672 50.768002 292.43201 51.535999 291.952 52.063999 c
291.47198 52.591999 290.76401 52.855999 289.828 52.855999 c
289.03601 52.855999 288.23199 52.639999 287.41599 52.208 c
286.60001 51.776001 285.91599 51.127998 285.36401 50.264 c
285.36401 40.400002 l
285.65201 35 l
280.68399 35 l
281.008 40.400002 l
281.008 51.380001 l
280.68399 56.599998 l
284.64401 56.599998 l
285.36401 53.863998 l
286.01199 54.848 286.87 55.591999 287.93799 56.096001 c
289.00601 56.599998 290.21201 56.852001 291.556 56.852001 c
293.26001 56.852001 294.59799 56.324001 295.57001 55.268002 c
296.54199 54.212002 297.02802 52.675999 297.02802 50.66 c
297.02802 40.400002 l
297.31601 35 l
292.384 35 l
292.672 40.400002 l
h
W
0 0 628 88 rc
279.68399 57.852001 m
298.31601 57.852001 l
298.31601 34 l
279.68399 34 l
h
f
Q
q
324.71201 49.147999 m
326.07999 48.596001 327.142 47.804001 327.89801 46.771999 c
328.65399 45.740002 329.03201 44.515999 329.03201 43.099998 c
329.03201 41.467999 328.63 40.040001 327.82599 38.816002 c
327.022 37.591999 325.89999 36.650002 324.45999 35.990002 c
323.01999 35.330002 321.35199 35 319.45599 35 c
309.70001 35 l
310.02399 40.400002 l
310.02399 56.779999 l
309.70001 62 l
319.492 62 l
321.10001 62 322.51001 61.675999 323.72198 61.028 c
324.93399 60.380001 325.87 59.467999 326.53 58.292 c
327.19 57.116001 327.51999 55.759998 327.51999 54.223999 c
327.51999 53.119999 327.28 52.136002 326.79999 51.271999 c
326.32001 50.408001 325.62399 49.700001 324.71201 49.147999 c
h
314.48801 57.716 m
314.48801 51.056 l
318.34 51.056 l
319.92401 51.056 321.07001 51.307999 321.77802 51.812 c
322.48599 52.316002 322.84 53.119999 322.84 54.223999 c
322.84 55.400002 322.48599 56.276001 321.77802 56.852001 c
321.07001 57.428001 319.948 57.716 318.41199 57.716 c
314.48801 57.716 l
h
319.45599 39.284 m
321.01599 39.284 322.22198 39.619999 323.07401 40.292 c
323.92599 40.964001 324.35199 41.900002 324.35199 43.099998 c
324.35199 45.548 322.74399 46.771999 319.52802 46.771999 c
314.48801 46.771999 l
314.48801 39.284 l
319.45599 39.284 l
h
W
0 0 628 88 rc
308.70001 63 m
330.03201 63 l
330.03201 34 l
308.70001 34 l
h
f
Q
q
332.01999 41.012001 m
332.01999 42.403999 332.34399 43.658001 332.992 44.773998 c
333.64001 45.889999 334.51599 46.765999 335.62 47.402 c
336.724 48.037998 337.936 48.355999 339.25601 48.355999 c
340.35999 48.355999 341.392 48.259998 342.35199 48.068001 c
343.31201 47.875999 344.09201 47.612 344.69199 47.276001 c
344.69199 49.292 l
344.69199 50.467999 344.314 51.355999 343.55801 51.956001 c
342.802 52.556 341.69199 52.855999 340.228 52.855999 c
338.78799 52.855999 337.504 52.604 336.37601 52.099998 c
335.24799 51.596001 334.384 50.875999 333.784 49.939999 c
333.388 50.012001 l
333.96399 54.728001 l
334.75601 55.472 335.76999 56.054001 337.00601 56.473999 c
338.242 56.894001 339.53201 57.104 340.87601 57.104 c
343.396 57.104 345.388 56.492001 346.85199 55.268002 c
348.31601 54.043999 349.048 52.352001 349.048 50.192001 c
349.048 40.363998 l
349.336 35 l
344.79999 35 l
344.69199 37.088001 l
344.23599 36.32 343.45599 35.683998 342.35199 35.18 c
341.24799 34.675999 340.07199 34.424 338.82401 34.424 c
336.71201 34.424 335.04999 35.012001 333.83801 36.188 c
332.62601 37.363998 332.01999 38.972 332.01999 41.012001 c
h
336.51999 41.335999 m
336.51999 40.279999 336.76001 39.506001 337.23999 39.014 c
337.72 38.521999 338.51199 38.276001 339.616 38.276001 c
340.52802 38.276001 341.46399 38.462002 342.42401 38.834 c
343.384 39.206001 344.14001 39.692001 344.69199 40.292 c
344.69199 43.495998 l
344.116 43.832001 343.37799 44.102001 342.478 44.306 c
341.578 44.509998 340.64801 44.612 339.68799 44.612 c
338.58401 44.612 337.78 44.341999 337.276 43.801998 c
336.772 43.262001 336.51999 42.439999 336.51999 41.335999 c
h
W
0 0 628 88 rc
331.01999 58.104 m
350.336 58.104 l
350.336 33.424 l
331.01999 33.424 l
h
f
Q
q
365.85999 40.400002 m
365.85999 49.759998 l
365.85999 50.768002 365.62 51.535999 365.14001 52.063999 c
364.66 52.591999 363.952 52.855999 363.01599 52.855999 c
362.224 52.855999 361.42001 52.639999 360.604 52.208 c
359.78799 51.776001 359.104 51.127998 358.552 50.264 c
358.552 40.400002 l
358.84 35 l
353.87201 35 l
354.19601 40.400002 l
354.19601 51.380001 l
353.87201 56.599998 l
357.832 56.599998 l
358.552 53.863998 l
359.20001 54.848 360.05801 55.591999 361.12601 56.096001 c
362.194 56.599998 363.39999 56.852001 364.74399 56.852001 c
366.448 56.852001 367.78601 56.324001 368.758 55.268002 c
369.73001 54.212002 370.216 52.675999 370.216 50.66 c
370.216 40.400002 l
370.504 35 l
365.57199 35 l
365.85999 40.400002 l
h
W
0 0 628 88 rc
352.87201 57.852001 m
371.504 57.852001 l
371.504 34 l
352.87201 34 l
h
f
Q
q
391.492 40.363998 m
391.81601 35 l
387.28 35 l
387.13599 37.16 l
386.70401 36.439999 386.03201 35.852001 385.12 35.396 c
384.20801 34.939999 383.30801 34.712002 382.42001 34.712002 c
379.85199 34.712002 377.87799 35.66 376.49799 37.556 c
375.11801 39.452 374.42801 42.212002 374.42801 45.835999 c
374.42801 49.675999 375.07001 52.501999 376.354 54.313999 c
377.638 56.125999 379.564 57.032001 382.13199 57.032001 c
384.19601 57.032001 385.86401 56.599998 387.13599 55.736 c
387.13599 58.580002 l
386.84799 63.799999 l
391.81601 63.799999 l
391.492 58.580002 l
391.492 40.363998 l
h
382.95999 38.888 m
383.79999 38.888 384.59799 39.001999 385.354 39.23 c
386.10999 39.458 386.70401 39.776001 387.13599 40.183998 c
387.13599 52.136002 l
386.20001 52.543999 384.92801 52.748001 383.32001 52.748001 c
382.168 52.748001 381.28 52.549999 380.65601 52.153999 c
380.03201 51.757999 379.58801 51.068001 379.32401 50.084 c
379.06 49.099998 378.92801 47.683998 378.92801 45.835999 c
378.92801 44.084 379.05399 42.709999 379.306 41.714001 c
379.55801 40.717999 379.978 39.998001 380.56601 39.554001 c
381.15399 39.110001 381.952 38.888 382.95999 38.888 c
h
W
0 0 628 88 rc
373.42801 64.800003 m
392.81601 64.800003 l
392.81601 33.712002 l
373.42801 33.712002 l
h
f
Q
q
405.064 34.568001 m
401.84799 34.568001 399.526 35.515999 398.09799 37.411999 c
396.67001 39.307999 395.95599 42.116001 395.95599 45.835999 c
395.95599 49.484001 396.71201 52.285999 398.224 54.242001 c
399.73599 56.198002 402.01599 57.175999 405.064 57.175999 c
407.992 57.175999 410.17001 56.419998 411.59799 54.908001 c
413.026 53.396 413.85999 50.995998 414.10001 47.708 c
413.12799 44.071999 l
400.52802 44.071999 l
400.60001 42.751999 400.81601 41.720001 401.17599 40.976002 c
401.53601 40.231998 402.09399 39.692001 402.85001 39.355999 c
403.60599 39.02 404.64401 38.852001 405.96399 38.852001 c
407.52399 38.852001 408.91 39.007999 410.12201 39.32 c
411.33401 39.632 412.23999 40.040001 412.84 40.543999 c
413.452 40.220001 l
412.48001 36.403999 l
411.59201 35.731998 410.578 35.257999 409.43799 34.981998 c
408.298 34.706001 406.84 34.568001 405.064 34.568001 c
h
409.63599 47.492001 m
409.612 49.363998 409.25201 50.731998 408.556 51.596001 c
407.85999 52.459999 406.74399 52.891998 405.20801 52.891998 c
403.57599 52.891998 402.40601 52.484001 401.698 51.667999 c
400.98999 50.852001 400.58801 49.459999 400.492 47.492001 c
409.63599 47.492001 l
h
W
0 0 628 88 rc
394.95599 58.175999 m
415.10001 58.175999 l
415.10001 33.568001 l
394.95599 33.568001 l
h
f
Q
q
429.86801 40.400002 m
429.86801 49.759998 l
429.86801 50.768002 429.62799 51.535999 429.14801 52.063999 c
428.668 52.591999 427.95999 52.855999 427.02399 52.855999 c
426.23199 52.855999 425.42801 52.639999 424.612 52.208 c
423.79599 51.776001 423.112 51.127998 422.56 50.264 c
422.56 40.400002 l
422.84799 35 l
417.88 35 l
418.20401 40.400002 l
418.20401 51.380001 l
417.88 56.599998 l
421.84 56.599998 l
422.56 53.863998 l
423.20801 54.848 424.06601 55.591999 425.134 56.096001 c
426.202 56.599998 427.40799 56.852001 428.75201 56.852001 c
430.45599 56.852001 431.79401 56.324001 432.76599 55.268002 c
433.73801 54.212002 434.224 52.675999 434.224 50.66 c
434.224 40.400002 l
434.51199 35 l
429.57999 35 l
429.86801 40.400002 l
h
W
0 0 628 88 rc
416.88 57.852001 m
435.51199 57.852001 l
435.51199 34 l
416.88 34 l
h
f
Q
q
461.90799 49.147999 m
463.276 48.596001 464.33801 47.804001 465.09399 46.771999 c
465.85001 45.740002 466.228 44.515999 466.228 43.099998 c
466.228 41.467999 465.82599 40.040001 465.022 38.816002 c
464.21799 37.591999 463.09601 36.650002 461.65601 35.990002 c
460.216 35.330002 458.548 35 456.65201 35 c
446.896 35 l
447.22 40.400002 l
447.22 56.779999 l
446.896 62 l
456.68799 62 l
458.29599 62 459.70599 61.675999 460.918 61.028 c
462.13 60.380001 463.06601 59.467999 463.72601 58.292 c
464.38599 57.116001 464.716 55.759998 464.716 54.223999 c
464.716 53.119999 464.47601 52.136002 463.996 51.271999 c
463.51599 50.408001 462.82001 49.700001 461.90799 49.147999 c
h
451.68399 57.716 m
451.68399 51.056 l
455.53601 51.056 l
457.12 51.056 458.26599 51.307999 458.974 51.812 c
459.68201 52.316002 460.03601 53.119999 460.03601 54.223999 c
460.03601 55.400002 459.68201 56.276001 458.974 56.852001 c
458.26599 57.428001 457.14401 57.716 455.608 57.716 c
451.68399 57.716 l
h
456.65201 39.284 m
458.21201 39.284 459.418 39.619999 460.26999 40.292 c
461.12201 40.964001 461.548 41.900002 461.548 43.099998 c
461.548 45.548 459.94 46.771999 456.724 46.771999 c
451.68399 46.771999 l
451.68399 39.284 l
456.65201 39.284 l
h
W
0 0 628 88 rc
445.896 63 m
467.228 63 l
467.228 34 l
445.896 34 l
h
f
Q
q
472.85199 34.748001 m
471.892 34.748001 471.08801 35.012001 470.44 35.540001 c
469.79199 36.068001 469.46799 36.751999 469.46799 37.591999 c
469.46799 38.431999 469.79199 39.127998 470.44 39.68 c
471.08801 40.231998 471.892 40.507999 472.85199 40.507999 c
473.78799 40.507999 474.586 40.231998 475.246 39.68 c
475.90601 39.127998 476.23599 38.431999 476.23599 37.591999 c
476.23599 36.751999 475.90601 36.068001 475.246 35.540001 c
474.586 35.012001 473.78799 34.748001 472.85199 34.748001 c
h
W
0 0 628 88 rc
468.46799 41.507999 m
477.23599 41.507999 l
477.23599 33.748001 l
468.46799 33.748001 l
h
f
Q
q
500.104 62 m
498.30399 56.599998 l
493.948 40.400002 l
492.724 35 l
485.884 35 l
484.69601 40.400002 l
480.37601 56.599998 l
478.612 62 l
484.08401 62 l
485.056 56.599998 l
489.48401 39.824001 l
493.948 56.599998 l
494.95599 62 l
500.104 62 l
h
W
0 0 628 88 rc
477.612 63 m
501.104 63 l
501.104 34 l
477.612 34 l
h
f
Q
q
505.86401 34.748001 m
504.90399 34.748001 504.10001 35.012001 503.452 35.540001 c
502.80399 36.068001 502.48001 36.751999 502.48001 37.591999 c
502.48001 38.431999 502.80399 39.127998 503.452 39.68 c
504.10001 40.231998 504.90399 40.507999 505.86401 40.507999 c
506.79999 40.507999 507.59799 40.231998 508.258 39.68 c
508.918 39.127998 509.24799 38.431999 509.24799 37.591999 c
509.24799 36.751999 508.918 36.068001 508.258 35.540001 c
507.59799 35.012001 506.79999 34.748001 505.86401 34.748001 c
h
W
0 0 628 88 rc
501.48001 41.507999 m
510.24799 41.507999 l
510.24799 33.748001 l
501.48001 33.748001 l
h
f
Q
0.72941178 0.59607846 0.13333334 sc
q
0 0 628 88 rc
1 0 0 -1 217 24 cm
/F1.1[ 18 0 0 -18 0 0]sf
0 19 m
(!"#$%#&'%\(\)"*\)&+,\)#,*"#$-./0,%#,12.#$3%24%+)[ 12.093750 10.872070 11.830078 11.390625 10.634766 11.830078 8.947266 11.390625 10.634766 9.254883 5.493164 10.872070 5.493164 5.493164 8.947266 7.813477 4.675781 5.493164 11.830078 4.675781 5.493164 10.872070 11.830078 11.390625 11.390625 11.144531 11.830078 15.407227 4.675781 10.634766 11.830078 4.675781 11.390625 7.998047 11.144531 11.830078 11.390625 10.239258 10.634766 8.173828 8.780273 10.634766 0.000000 ] xS
ep
end
